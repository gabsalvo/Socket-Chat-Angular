import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { io } from 'socket.io-client';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class ChatService {
    constructor(http) {
        this.http = http;
        this.baseUrl = 'https://0e9b-93-35-217-254.ngrok-free.app';
        const room = localStorage.getItem('chatRoom');
        this.socket = io('https://0e9b-93-35-217-254.ngrok-free.app');
    }
    getGlobalMessages() {
        return this.http.get(`${this.baseUrl}/global-messages`);
    }
    sendMessage(message) {
        this.socket.emit('sendMessage', message);
    }
    getMessages() {
        return new Observable((observer) => {
            this.socket.on('message', (data) => {
                observer.next(data);
            });
        });
    }
    joinRoom(room, username) {
        this.socket.emit('joinRoom', { room, username: username || 'default' });
    }
    leaveRoom(room, username) {
        this.socket.emit('leaveRoom', { room, username: username || 'default' });
    }
    sendMessageToRoom(room, message, username) {
        this.socket.emit('sendMessage', { room, message, username });
    }
    generateRoomCode() {
        return Math.random().toString(36).substring(2, 9);
    }
    getActiveRooms() {
        return this.http.get('http://localhost:3000/active-rooms');
    }
    getActiveRoomsUpdates() {
        return new Observable((observer) => {
            this.socket.on('activeRooms', (rooms) => {
                observer.next(rooms);
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChatService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChatService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChatService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2hhdC1saWIvc3JjL2xpYi9zZXJ2aWNlcy9jaGF0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxFQUFFLEVBQVUsTUFBTSxrQkFBa0IsQ0FBQzs7O0FBTTlDLE1BQU0sT0FBTyxXQUFXO0lBSXRCLFlBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFGNUIsWUFBTyxHQUFHLDJDQUEyQyxDQUFDO1FBRzVELE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsMkNBQTJDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRU0saUJBQWlCO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFTSxXQUFXLENBQUMsT0FBZTtRQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVNLFdBQVc7UUFDaEIsT0FBTyxJQUFJLFVBQVUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUNqQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sUUFBUSxDQUFDLElBQVksRUFBRSxRQUFpQjtRQUM3QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFTSxTQUFTLENBQUMsSUFBWSxFQUFFLFFBQWlCO1FBQzlDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVNLGlCQUFpQixDQUN0QixJQUFZLEVBQ1osT0FBZSxFQUNmLFFBQWdCO1FBRWhCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBQ00sZ0JBQWdCO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFTSxjQUFjO1FBQ25CLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQVcsb0NBQW9DLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRU0scUJBQXFCO1FBQzFCLE9BQU8sSUFBSSxVQUFVLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDdEMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN2QixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzsrR0F0RFUsV0FBVzttSEFBWCxXQUFXLGNBRlYsTUFBTTs7NEZBRVAsV0FBVztrQkFIdkIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBpbywgU29ja2V0IH0gZnJvbSAnc29ja2V0LmlvLWNsaWVudCc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQ2hhdFNlcnZpY2Uge1xuICBwcml2YXRlIHNvY2tldDogU29ja2V0O1xuICBwcml2YXRlIGJhc2VVcmwgPSAnaHR0cHM6Ly8wZTliLTkzLTM1LTIxNy0yNTQubmdyb2stZnJlZS5hcHAnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge1xuICAgIGNvbnN0IHJvb20gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY2hhdFJvb20nKTtcbiAgICB0aGlzLnNvY2tldCA9IGlvKCdodHRwczovLzBlOWItOTMtMzUtMjE3LTI1NC5uZ3Jvay1mcmVlLmFwcCcpO1xuICB9XG5cbiAgcHVibGljIGdldEdsb2JhbE1lc3NhZ2VzKCk6IE9ic2VydmFibGU8YW55W10+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxhbnlbXT4oYCR7dGhpcy5iYXNlVXJsfS9nbG9iYWwtbWVzc2FnZXNgKTtcbiAgfVxuXG4gIHB1YmxpYyBzZW5kTWVzc2FnZShtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnNvY2tldC5lbWl0KCdzZW5kTWVzc2FnZScsIG1lc3NhZ2UpO1xuICB9XG5cbiAgcHVibGljIGdldE1lc3NhZ2VzKCk6IE9ic2VydmFibGU8eyB1c2VybmFtZTogc3RyaW5nOyBtZXNzYWdlOiBzdHJpbmcgfT4ge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZSgob2JzZXJ2ZXIpID0+IHtcbiAgICAgIHRoaXMuc29ja2V0Lm9uKCdtZXNzYWdlJywgKGRhdGEpID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dChkYXRhKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGpvaW5Sb29tKHJvb206IHN0cmluZywgdXNlcm5hbWU/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnNvY2tldC5lbWl0KCdqb2luUm9vbScsIHsgcm9vbSwgdXNlcm5hbWU6IHVzZXJuYW1lIHx8ICdkZWZhdWx0JyB9KTtcbiAgfVxuXG4gIHB1YmxpYyBsZWF2ZVJvb20ocm9vbTogc3RyaW5nLCB1c2VybmFtZT86IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuc29ja2V0LmVtaXQoJ2xlYXZlUm9vbScsIHsgcm9vbSwgdXNlcm5hbWU6IHVzZXJuYW1lIHx8ICdkZWZhdWx0JyB9KTtcbiAgfVxuXG4gIHB1YmxpYyBzZW5kTWVzc2FnZVRvUm9vbShcbiAgICByb29tOiBzdHJpbmcsXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICAgIHVzZXJuYW1lOiBzdHJpbmcsXG4gICk6IHZvaWQge1xuICAgIHRoaXMuc29ja2V0LmVtaXQoJ3NlbmRNZXNzYWdlJywgeyByb29tLCBtZXNzYWdlLCB1c2VybmFtZSB9KTtcbiAgfVxuICBwdWJsaWMgZ2VuZXJhdGVSb29tQ29kZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgOSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QWN0aXZlUm9vbXMoKTogT2JzZXJ2YWJsZTxzdHJpbmdbXT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PHN0cmluZ1tdPignaHR0cDovL2xvY2FsaG9zdDozMDAwL2FjdGl2ZS1yb29tcycpO1xuICB9XG5cbiAgcHVibGljIGdldEFjdGl2ZVJvb21zVXBkYXRlcygpOiBPYnNlcnZhYmxlPHN0cmluZ1tdPiB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcikgPT4ge1xuICAgICAgdGhpcy5zb2NrZXQub24oJ2FjdGl2ZVJvb21zJywgKHJvb21zKSA9PiB7XG4gICAgICAgIG9ic2VydmVyLm5leHQocm9vbXMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==