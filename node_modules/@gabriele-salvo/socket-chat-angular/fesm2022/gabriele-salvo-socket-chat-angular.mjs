import * as i0 from '@angular/core';
import { Injectable, EventEmitter, Component, Input, Output, NgModule } from '@angular/core';
import { Observable } from 'rxjs';
import { io } from 'socket.io-client';
import * as i1 from '@angular/common/http';
import { HttpClientModule } from '@angular/common/http';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from '@angular/forms';
import { FormsModule } from '@angular/forms';

class ChatService {
    constructor(http) {
        this.http = http;
        this.baseUrl = 'https://0e9b-93-35-217-254.ngrok-free.app';
        const room = localStorage.getItem('chatRoom');
        this.socket = io('https://0e9b-93-35-217-254.ngrok-free.app');
    }
    getGlobalMessages() {
        return this.http.get(`${this.baseUrl}/global-messages`);
    }
    sendMessage(message) {
        this.socket.emit('sendMessage', message);
    }
    getMessages() {
        return new Observable((observer) => {
            this.socket.on('message', (data) => {
                observer.next(data);
            });
        });
    }
    joinRoom(room, username) {
        this.socket.emit('joinRoom', { room, username: username || 'default' });
    }
    leaveRoom(room, username) {
        this.socket.emit('leaveRoom', { room, username: username || 'default' });
    }
    sendMessageToRoom(room, message, username) {
        this.socket.emit('sendMessage', { room, message, username });
    }
    generateRoomCode() {
        return Math.random().toString(36).substring(2, 9);
    }
    getActiveRooms() {
        return this.http.get('http://localhost:3000/active-rooms');
    }
    getActiveRoomsUpdates() {
        return new Observable((observer) => {
            this.socket.on('activeRooms', (rooms) => {
                observer.next(rooms);
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChatService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChatService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChatService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });

class ChatRoomComponent {
    constructor(chatService) {
        this.chatService = chatService;
        this.room = '';
        this.username = 'default';
        this.message = '';
        this.messages = [];
        this.inRoom = false;
        this.leave = new EventEmitter();
    }
    ngOnInit() {
        if (this.room === 'Global Chat') {
            this.fetchGlobalMessages();
        }
        this.chatService.getMessages().subscribe((data) => {
            if (data.room === this.room) {
                this.messages.push(data);
            }
        });
    }
    fetchGlobalMessages() {
        this.chatService.getGlobalMessages().subscribe((messages) => {
            this.messages = messages.filter((msg) => msg.room === 'Global Chat');
        });
    }
    joinRoom() {
        this.chatService.joinRoom(this.room, this.username || 'default');
        this.inRoom = true;
    }
    leaveRoom() {
        console.log(`Leaving room: ${this.room}`);
        this.chatService.leaveRoom(this.room, this.username || 'default');
        this.inRoom = false;
        this.leave.emit();
    }
    sendMessage() {
        if (this.username != null) {
            this.chatService.sendMessageToRoom(this.room, this.message, this.username);
        }
        this.message = '';
    }
    generateRoomCode() {
        this.room = Math.random().toString(36).substring(2, 9);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChatRoomComponent, deps: [{ token: ChatService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ChatRoomComponent, selector: "app-chat-room", inputs: { room: "room", username: "username" }, outputs: { leave: "leave" }, ngImport: i0, template: "<div class=\"chat-room\">\n  <h3 class=\"title is-5 has-background-primary has-text-white p-3\">\n    {{ room }}\n  </h3>\n  <div class=\"messages\">\n    <div class=\"message\" *ngFor=\"let msg of messages\">\n      <strong>{{ msg.username }}:</strong> {{ msg.message }}\n    </div>\n  </div>\n\n  <div class=\"field has-addons\">\n    <div class=\"control is-expanded\">\n      <input class=\"input\" [(ngModel)]=\"message\" placeholder=\"Type a message\" />\n    </div>\n    <div class=\"control\">\n      <button class=\"button is-info\" (click)=\"sendMessage()\">Send</button>\n    </div>\n  </div>\n\n  <button class=\"button is-danger mr-5\" (click)=\"leaveRoom()\">\n    Leave Room\n  </button>\n</div>\n", styles: [".chat-room{display:flex;flex-direction:column;justify-content:space-between;height:80vh;width:30vw;background-color:#fff;border:1px solid #ddd;padding:.75rem;overflow:hidden;position:fixed;bottom:20px;right:20px;box-shadow:0 2px 10px #0000001a;z-index:1000}.messages{overflow-y:auto;flex-grow:1}.message{margin-bottom:.5rem;padding:.5rem;background-color:#f5f5f5;border-radius:4px}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChatRoomComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-chat-room', template: "<div class=\"chat-room\">\n  <h3 class=\"title is-5 has-background-primary has-text-white p-3\">\n    {{ room }}\n  </h3>\n  <div class=\"messages\">\n    <div class=\"message\" *ngFor=\"let msg of messages\">\n      <strong>{{ msg.username }}:</strong> {{ msg.message }}\n    </div>\n  </div>\n\n  <div class=\"field has-addons\">\n    <div class=\"control is-expanded\">\n      <input class=\"input\" [(ngModel)]=\"message\" placeholder=\"Type a message\" />\n    </div>\n    <div class=\"control\">\n      <button class=\"button is-info\" (click)=\"sendMessage()\">Send</button>\n    </div>\n  </div>\n\n  <button class=\"button is-danger mr-5\" (click)=\"leaveRoom()\">\n    Leave Room\n  </button>\n</div>\n", styles: [".chat-room{display:flex;flex-direction:column;justify-content:space-between;height:80vh;width:30vw;background-color:#fff;border:1px solid #ddd;padding:.75rem;overflow:hidden;position:fixed;bottom:20px;right:20px;box-shadow:0 2px 10px #0000001a;z-index:1000}.messages{overflow-y:auto;flex-grow:1}.message{margin-bottom:.5rem;padding:.5rem;background-color:#f5f5f5;border-radius:4px}\n"] }]
        }], ctorParameters: function () { return [{ type: ChatService }]; }, propDecorators: { room: [{
                type: Input
            }], username: [{
                type: Input
            }], leave: [{
                type: Output
            }] } });

class ChatComponent {
    constructor(chatService) {
        this.chatService = chatService;
        this.activeRooms = [];
        this.roomCode = '';
        this.inRoom = false;
        this.globalRoomId = 'Global Chat';
        this.username = 'default';
        this.globalMessages = [];
    }
    joinGlobalChat() {
        this.roomCode = this.globalRoomId;
        this.joinRoom();
        this.fetchGlobalMessages();
    }
    fetchGlobalMessages() {
        if (this.roomCode === this.globalRoomId) {
            this.chatService.getGlobalMessages().subscribe((messages) => {
                this.globalMessages = messages; // Salva i messaggi nella proprietà
            });
        }
    }
    joinNamedRoom() {
        if (this.roomCode.trim()) {
            this.joinRoom();
        }
    }
    createRoom() {
        this.roomCode = this.chatService.generateRoomCode();
        console.log(this.roomCode);
        this.joinRoom();
    }
    joinRoom() {
        if (this.username != null) {
            this.chatService.joinRoom(this.roomCode, this.username);
            this.inRoom = true;
        }
    }
    leaveNamedRoom() {
        if (this.username != null) {
            this.chatService.leaveRoom(this.roomCode, this.username);
            this.roomCode = '';
            this.inRoom = false;
        }
    }
    ngOnInit() {
        console.log('Username in ChatComponent:', this.username);
        this.chatService.getActiveRoomsUpdates().subscribe((rooms) => {
            this.activeRooms = rooms;
        });
        this.fetchActiveRooms();
    }
    fetchActiveRooms() {
        this.chatService.getActiveRooms().subscribe((rooms) => {
            this.activeRooms = rooms;
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChatComponent, deps: [{ token: ChatService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ChatComponent, selector: "app-chat", inputs: { username: "username" }, ngImport: i0, template: "<div class=\"chat-container\">\n  <div *ngIf=\"!inRoom\" class=\"box\">\n    <!-- Button to join the global chat room -->\n    <div class=\"field\">\n      <p class=\"control\">\n        <button\n          class=\"button is-primary is-fullwidth\"\n          (click)=\"joinGlobalChat()\"\n        >\n          Join Global Chat\n        </button>\n      </p>\n    </div>\n\n    <!-- Input and button to create/join a named room -->\n    <div class=\"field has-addons\">\n      <p class=\"control is-expanded\">\n        <input\n          class=\"input\"\n          type=\"text\"\n          [(ngModel)]=\"roomCode\"\n          placeholder=\"Enter room name\"\n        />\n      </p>\n      <p class=\"control\">\n        <button\n          class=\"button is-info\"\n          (click)=\"joinNamedRoom()\"\n          [disabled]=\"!roomCode.trim()\"\n        >\n          Create/Join Room\n        </button>\n      </p>\n    </div>\n    <div class=\"active-rooms\">\n      <h3 class=\"title is-4\">Available Rooms:</h3>\n      <ul>\n        <li *ngFor=\"let room of activeRooms\" class=\"room-list-item\">\n          {{ room }}\n        </li>\n      </ul>\n    </div>\n  </div>\n\n  <!-- ChatRoom component shown only if in a room -->\n  <app-chat-room\n    *ngIf=\"inRoom\"\n    [room]=\"roomCode\"\n    [username]=\"username\"\n    (leave)=\"leaveNamedRoom()\"\n  ></app-chat-room>\n</div>\n", styles: [".chat-container{position:fixed;right:20px;bottom:20px;width:300px;max-height:400px;border:1px solid #ddd;background-color:#fff;box-shadow:0 2px 10px #0003;z-index:1000;overflow:hidden}.chat-entry{padding:10px}.active-rooms{max-height:200px;overflow-y:auto}.room-list-item{margin-bottom:.5em}.button.is-fullwidth{margin-bottom:10px}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: ChatRoomComponent, selector: "app-chat-room", inputs: ["room", "username"], outputs: ["leave"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChatComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-chat', template: "<div class=\"chat-container\">\n  <div *ngIf=\"!inRoom\" class=\"box\">\n    <!-- Button to join the global chat room -->\n    <div class=\"field\">\n      <p class=\"control\">\n        <button\n          class=\"button is-primary is-fullwidth\"\n          (click)=\"joinGlobalChat()\"\n        >\n          Join Global Chat\n        </button>\n      </p>\n    </div>\n\n    <!-- Input and button to create/join a named room -->\n    <div class=\"field has-addons\">\n      <p class=\"control is-expanded\">\n        <input\n          class=\"input\"\n          type=\"text\"\n          [(ngModel)]=\"roomCode\"\n          placeholder=\"Enter room name\"\n        />\n      </p>\n      <p class=\"control\">\n        <button\n          class=\"button is-info\"\n          (click)=\"joinNamedRoom()\"\n          [disabled]=\"!roomCode.trim()\"\n        >\n          Create/Join Room\n        </button>\n      </p>\n    </div>\n    <div class=\"active-rooms\">\n      <h3 class=\"title is-4\">Available Rooms:</h3>\n      <ul>\n        <li *ngFor=\"let room of activeRooms\" class=\"room-list-item\">\n          {{ room }}\n        </li>\n      </ul>\n    </div>\n  </div>\n\n  <!-- ChatRoom component shown only if in a room -->\n  <app-chat-room\n    *ngIf=\"inRoom\"\n    [room]=\"roomCode\"\n    [username]=\"username\"\n    (leave)=\"leaveNamedRoom()\"\n  ></app-chat-room>\n</div>\n", styles: [".chat-container{position:fixed;right:20px;bottom:20px;width:300px;max-height:400px;border:1px solid #ddd;background-color:#fff;box-shadow:0 2px 10px #0003;z-index:1000;overflow:hidden}.chat-entry{padding:10px}.active-rooms{max-height:200px;overflow-y:auto}.room-list-item{margin-bottom:.5em}.button.is-fullwidth{margin-bottom:10px}\n"] }]
        }], ctorParameters: function () { return [{ type: ChatService }]; }, propDecorators: { username: [{
                type: Input
            }] } });

class WrapperComponent {
    constructor() {
        this.username = 'default';
        this.chatOpen = false;
    }
    toggleChat() {
        this.chatOpen = !this.chatOpen;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: WrapperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: WrapperComponent, selector: "app-wrapper", inputs: { username: "username" }, ngImport: i0, template: "<!-- chat-wrapper.component.html -->\n<div class=\"chat-wrapper\">\n  <div *ngIf=\"!chatOpen\" class=\"chat-icon\" (click)=\"toggleChat()\">\n    <i class=\"fa fa-comments custom\"></i>\n  </div>\n\n  <div *ngIf=\"chatOpen\">\n    <app-chat [username]=\"username\"></app-chat>\n    <button class=\"close-chat-btn\" (click)=\"toggleChat()\">\n      <i class=\"fa fa-times-circle\"></i>\n    </button>\n  </div>\n</div>\n", styles: [".chat-wrapper{position:fixed;bottom:20px;right:20px;z-index:1000}.chat-icon{width:50px;height:50px;background-color:#007bff;border-radius:50%;display:flex;justify-content:center;align-items:center;cursor:pointer;box-shadow:0 0 10px #00000080}.close-chat-btn{position:absolute;bottom:10px;right:0;background-color:transparent;border:none;cursor:pointer;font-size:24px;line-height:1;padding:10px;z-index:1010}.custom{color:#fff}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: ChatComponent, selector: "app-chat", inputs: ["username"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: WrapperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-wrapper', template: "<!-- chat-wrapper.component.html -->\n<div class=\"chat-wrapper\">\n  <div *ngIf=\"!chatOpen\" class=\"chat-icon\" (click)=\"toggleChat()\">\n    <i class=\"fa fa-comments custom\"></i>\n  </div>\n\n  <div *ngIf=\"chatOpen\">\n    <app-chat [username]=\"username\"></app-chat>\n    <button class=\"close-chat-btn\" (click)=\"toggleChat()\">\n      <i class=\"fa fa-times-circle\"></i>\n    </button>\n  </div>\n</div>\n", styles: [".chat-wrapper{position:fixed;bottom:20px;right:20px;z-index:1000}.chat-icon{width:50px;height:50px;background-color:#007bff;border-radius:50%;display:flex;justify-content:center;align-items:center;cursor:pointer;box-shadow:0 0 10px #00000080}.close-chat-btn{position:absolute;bottom:10px;right:0;background-color:transparent;border:none;cursor:pointer;font-size:24px;line-height:1;padding:10px;z-index:1010}.custom{color:#fff}\n"] }]
        }], propDecorators: { username: [{
                type: Input
            }] } });

class ChatLibModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChatLibModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: ChatLibModule, declarations: [ChatComponent, ChatRoomComponent, WrapperComponent], imports: [CommonModule, FormsModule, HttpClientModule], exports: [ChatComponent, ChatRoomComponent, WrapperComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChatLibModule, providers: [ChatService], imports: [CommonModule, FormsModule, HttpClientModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ChatLibModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ChatComponent, ChatRoomComponent, WrapperComponent],
                    imports: [CommonModule, FormsModule, HttpClientModule],
                    exports: [ChatComponent, ChatRoomComponent, WrapperComponent],
                    providers: [ChatService],
                }]
        }] });

/*
 * Public API Surface of chat-lib
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ChatComponent, ChatLibModule, ChatRoomComponent, ChatService, WrapperComponent };
//# sourceMappingURL=gabriele-salvo-socket-chat-angular.mjs.map
